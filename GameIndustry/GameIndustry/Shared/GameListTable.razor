@using System.Diagnostics;
<div class="table-responsive">
    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                <th>Name</th>
                <th>Genre</th>
                <th>Release</th>
                @*<th><input type="checkbox" @onchange="(() => displayButtons = !displayButtons)" /></th>*@
                <th><input type="checkbox" @bind="displayButtons" /></th>

            </tr>
        </thead>
        <tbody>
            <GenericList ListOfItems="Games">
                <ItemTemplate Context="game_">
                    <IndividualGame Game="game_" IsTable="true" DisplayButtons="displayButtons" DeleteGame="DeleteTheGame" />
                </ItemTemplate>
            </GenericList>
           @* @if (Games == null)
            {*@
                @* <tr>LOADING...</tr>*@
               @* if (NullList != null)
                {
                    @NullList
                }
                else
                {
                    <img src="https://img.pikbest.com/png-images/20190918/cartoon-snail-loading-loading-gif-animation_2734139.png!bw700" height="200" />
                }
            }
            else if (Games.Count == 0)
            {
                @*  <tr>NO Items in array</tr>*@
               @* if (EmptyList != null)
                {
                    @EmptyList
                }
                else
                {
                    <img src="https://media.licdn.com/dms/image/C560BAQHvjs3O4Utmdw/company-logo_200_200/0/1519867717451?e=2147483647&v=beta&t=_ljcO2P4eZKn4slFIQnwCWJZAqCMSDdSEcpx02bS5v0" height="200" />
                }
            }
            else
            {
                @foreach (var item in Games)
                {
                    <IndividualGame Game="item" IsTable="true" DisplayButtons="displayButtons" DeleteGame="DeleteTheGame" />*@
                    @*  <tr>
            <td>@item.Name</td>
            <td>@item.Genre</td>
            <td>@item.ReleaseDate.ToString("dd.MM.yyyy")</td>
            </tr>*@
          @*      }
            }*@
        </tbody>
    </table>
</div>

@code {
    [Parameter] public List<Game> Games { get; set; }
    [Parameter] public RenderFragment NullList { get; set; }
    [Parameter] public RenderFragment EmptyList { get; set; }

    private bool displayButtons = false;

    private void DeleteTheGame(Game game)
    {
        Games.Remove(game);
    }

    /// <summary>
    /// При инициализации компонента
    /// </summary>
    protected override void OnInitialized()
    {
        //base.OnInitialized();
        Console.WriteLine($"1. OnInitialized(). Game count: {Games? .Count}");
    }

    /// <summary>
    /// При установке параметров
    /// </summary>
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine($"2. OnParametersSet()");
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        Console.WriteLine($"3. OnAfterRender(bool firstRender). FirstRender? : {firstRender}");
    }

    /// <summary>
    ///  Дает или отключает возможность перерисовывать наши компоненты
    /// </summary>
    /// <returns></returns>
    protected override bool ShouldRender()
    {
       // return base.ShouldRender();
        return true;
    }
}
